#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t mutex;
pthread_mutex_t wr;
int a = 10, readcount = 0;

void *reader(void *arg) {
    long int num = (long int)arg;
    
    pthread_mutex_lock(&mutex);
    if (++readcount == 1) {
        pthread_mutex_lock(&wr);
    }
    pthread_mutex_unlock(&mutex);
    
    printf("\nReader %ld is in the critical section", num);
    printf("\nReader %ld is reading data %d", num, a);
    sleep(1);
    
    pthread_mutex_lock(&mutex);
    if (--readcount == 0) {
        pthread_mutex_unlock(&wr);
    }
    pthread_mutex_unlock(&mutex);
    
    printf("\nReader %ld left the critical section", num);
}

void *writer(void *arg) {
    long int num = (long int)arg;
    pthread_mutex_lock(&wr);
    printf("\nWriter %ld is in the critical section", num);
    printf("\nWriter %ld is writing data as %d", num, ++a);
    sleep(1);
    pthread_mutex_unlock(&wr);
    printf("\nWriter %ld left the critical section", num);
}

int main() {
    pthread_t r[10], w[10];
    int nor, now;

    pthread_mutex_init(&wr, NULL);
    pthread_mutex_init(&mutex, NULL);

    printf("\nEnter number of readers and writers: ");
    scanf("%d %d", &nor, &now);

    for (int i = 0; i < nor; i++) {
        pthread_create(&r[i], NULL, reader, (void *)(long int)i);
    }

    for (int j = 0; j < now; j++) {
        pthread_create(&w[j], NULL, writer, (void *)(long int)j);
    }

    for (int i = 0; i < nor; i++) {
        pthread_join(r[i], NULL);
    }

    for (int j = 0; j < now; j++) {
        pthread_join(w[j], NULL);
    }

    return 0;
}